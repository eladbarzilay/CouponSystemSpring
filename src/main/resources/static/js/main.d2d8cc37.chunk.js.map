{"version":3,"sources":["reportWebVitals.ts","Components/LayoutArea/Clock/Clock.tsx","Components/LayoutArea/Footer/Footer.tsx","Redux/AdminCustomerState.ts","Redux/AdminState.ts","Redux/AuthState.ts","Redux/CompanyState.ts","Redux/CustomerPurchseState.ts","Redux/CustomerState.ts","Redux/Store.ts","Components/AuthArea/AuthMenu/AuthMenu.tsx","Components/LayoutArea/Logo/Logo.tsx","Components/LayoutArea/Header/Header.tsx","Components/LayoutArea/Main/Main.tsx","Components/ShardArea/Page404/Page404.tsx","Services/Notification.ts","Services/Globals.ts","Components/AuthArea/Login/Login.tsx","Components/ShardArea/EmptyView/EmptyView.tsx","Components/AuthArea/Logout/Logout.tsx","Services/InterceptorAxios.ts","Components/AdminArea/Admin/Admin.tsx","Components/AdminArea/AdminArea.tsx","Models/ClientTypeModel.ts","Components/CustomersArea/Customer/Customer.tsx","Components/CompaniesArea/Company/Company.tsx","Components/AdminArea/AddCompany/AddCompany.tsx","Components/AdminArea/AddCustomer/AddCustomer.tsx","Components/AdminArea/UpdateCompany/UpdateCompany.tsx","Components/AdminArea/UpdateCustomer/UpdateCustomer.tsx","Models/CategoryTypeModel.ts","Components/CompaniesArea/AddCompanyCoupon.tsx","Components/CompaniesArea/UpdateCompanyCoupon/UpdateCompanyCoupon.tsx","Components/CustomersArea/CustomerPurchases/CustomerPurchases.tsx","Components/LayoutArea/Routing/Routing.tsx","Components/LayoutArea/RightMenu/RightMenu.tsx","Components/LayoutArea/Menu/Menu.tsx","Components/LayoutArea/Layout/Layout.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Clock","props","timerid","state","time","this","window","setInterval","now","Date","setState","toLocaleTimeString","className","Component","Footer","AdminCustomerActionType","href","target","AdminCustomerAppState","adminCustomer","adminCustomerAddedAction","type","adminCustomerAdded","payload","adminCustomerUpdatedAction","adminCustomerUpdated","adminCustomerDeletedAction","id","adminCustomerDeleted","AdminActionType","AdminAppState","admin","adminAddedAction","adminAdded","adminUpdatedAction","adminUpdated","adminDeletedAction","adminDeleted","AuthActionType","AuthAppState","user","storedUser","JSON","parse","localStorage","getItem","loginAction","Login","CompanyActionType","CompanyAppState","company","companyAddedAction","companyAdded","companyUpdatedAction","companyUpdated","companyDeletedAction","companyDeleted","CustomerPurchaseActionType","CustomerPurchaseAppState","customerPurchase","customerPurchaseDownloadedAction","customerPurchaseDownloaded","CustomerActionType","CustomerAppState","customer","customerDownloadedAction","customerDownloaded","reducers","combineReducers","adminState","currentState","action","newState","adminDownloaded","console","log","push","filter","c","adminCustomerState","adminCustomerDownloaded","companyState","companyDownloaded","CustomerState","customerAdded","customerUpdated","customerDeleted","customerPurchaseState","customerPurchaseAdded","customerPurchaseUpdated","customerPurchaseDeleted","authState","setItem","stringify","Logout","removeItem","store","createStore","AuthMenu","unsubscribe","getState","subscribe","clientType","toLowerCase","to","activeClassName","Logo","src","alt","Header","Main","Page404","SccMsg","ErrMsg","Globals","globals","urls","login","logout","companies","customers","notify","notification","Notyf","duration","position","x","y","message","success","err","msg","extractMsg","error","response","data","Array","isArray","history","useHistory","useForm","register","handleSubmit","credentials","a","url","axios","post","dispatch","formState","errors","onSubmit","required","value","disabled","placeholder","pattern","minLength","maxLength","EmptyView","useEffect","LOGOUT_SUCCESS","tokenAxios","create","interceptors","request","use","headers","token","Admin","get","status","GET_COMPANIES","GET_CUSTOMERS","confirm","delete","DELETE_COMPANY","DELETE_CUSTOMER","length","style","textDecoration","map","name","email","password","onClick","firstName","lastName","deleteCustomer","AdminArea","ClientType","Customer","coupons","couponsPurchase","PLS_LOGIN","GET_COUPONS","response1","GET_COUPONS_PURCHASE","title","PURCHASE_COUPON","date","myDate","year","getFullYear","month","getMonth","slice","getDate","category","price","description","startDate","endDate","amount","purchase","Company","DELETE_COUPON","companyID","AddCompany","mode","isDirty","isValid","put","added","ADD_COMPANY","color","AddCustomer","ADD_CUSTOMER","UpdateCompany","match","params","useState","find","UPDATE_COMPANY","defaultValue","UpdateCustomer","CategoryType","UPDATE_CUSTOMER","AddCompanyCoupon","coupon","fdate","setHours","tdate","cdate","valueOf","alert","ADD_COUPON","food","electricity","vacation","cars","min","UpdateCompanyCoupon","image","updated","UPDATE_COUPON","CustomerPurchases","ClientTypeModel","PURCHASED_COUPONS","Routing","path","component","exact","from","RightMenu","Menu","React","left","toggleDrawer","anchor","open","event","key","list","Box","sx","width","role","onKeyDown","List","Divider","WhatType","Button","Drawer","onClose","Layout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2d8cc37.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Component } from \"react\";\nimport \"./Clock.css\";\n\ninterface ClockState {\n\ttime:string;\n}\n\nclass Clock extends Component<{}, ClockState> {\n\nprivate timerid:number = 0;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {time:\"\"};\n    }\n\n    public componentDidMount() {\n        this.timerid = window.setInterval(() =>{\n            const now = new Date();\n            this.setState ({time:now.toLocaleTimeString()})\n\n        },1000)\n\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"Clock\">\n\t\t\t\t<p >{this.state.time}</p>\n            </div>\n        );\n    }\n}\n\nexport default Clock;\n","import Clock from \"../Clock/Clock\";\nimport \"./Footer.css\";\n\nfunction Footer(): JSX.Element {\n    return (\n        <div className=\"Footer\">\n            <Clock/>\n\t\t\t<h1>    all rights reserved to <a href=\"https://www.linkedin.com/in/elad-barzilay-%D7%90%D7%9C%D7%A2%D7%93-%D7%91%D7%A8%D7%96%D7%99%D7%9C%D7%90%D7%99-04b34ba1/\" target = \"_blank\">elad barzilay</a> &copy;</h1>\n       \n        </div>\n    );\n}\n\nexport default Footer;\n","import CustomerModel from \"../Models/CustomerModel\";\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class AdminCustomerAppState {\r\n    public adminCustomer: CustomerModel[] = [];\r\n}\r\n\r\n//Step 2 - Define ActionType using enum for all required operations\r\nexport enum AdminCustomerActionType {\r\n    adminCustomerDownloaded = \"adminCustomerDownloaded\",\r\n    adminCustomerAdded = \"adminCustomerAdded\",\r\n    adminCustomerUpdated = \"adminCustomerUpdated\",\r\n    adminCustomerDeleted = \"adminCustomerDeleted\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface AdminCustomerAction {\r\n    type: AdminCustomerActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function adminCustomerDownloadedAction(adminCustomer: CustomerModel[]): AdminCustomerAction {\r\n    return { type: AdminCustomerActionType.adminCustomerDownloaded, payload: adminCustomer };\r\n}\r\nexport function adminCustomerAddedAction(adminCustomer: CustomerModel): AdminCustomerAction {\r\n    return { type: AdminCustomerActionType.adminCustomerAdded, payload: adminCustomer };\r\n}\r\n\r\nexport function adminCustomerUpdatedAction(adminCustomer: CustomerModel): AdminCustomerAction {\r\n    return { type: AdminCustomerActionType.adminCustomerUpdated, payload: adminCustomer };\r\n}\r\n\r\nexport function adminCustomerDeletedAction(id: number): AdminCustomerAction {\r\n    return { type: AdminCustomerActionType.adminCustomerDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function adminCustomerReducer(currentState: AdminCustomerAppState = new AdminCustomerAppState(), action: AdminCustomerAction): AdminCustomerAppState {\r\n\r\n    const newState = { ...currentState } //Spread Operator\r\n\r\n    switch (action.type) {\r\n        case AdminCustomerActionType.adminCustomerDownloaded:\r\n            console.log(action.payload);\r\n            newState.adminCustomer = action.payload;//ToDo\r\n            break;\r\n        case AdminCustomerActionType.adminCustomerAdded:\r\n            newState.adminCustomer.push(action.payload);//ToDo\r\n            break;\r\n\r\n        case AdminCustomerActionType.adminCustomerUpdated://ToDo\r\n            break;\r\n        case AdminCustomerActionType.adminCustomerDeleted:\r\n            newState.adminCustomer = newState.adminCustomer.filter(c => c.id !== action.payload);//ToDo\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}","import CompanyModel from \"../Models/CompanyModel\";\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class AdminAppState {\r\n    public admin: CompanyModel[] = [];\r\n}\r\n\r\n//Step 2 - Define ActionType using enum for all required operations\r\nexport enum AdminActionType {\r\n    adminDownloaded = \"adminDownloaded\",\r\n    adminAdded = \"adminAdded\",\r\n    adminUpdated = \"adminUpdated\",\r\n    adminDeleted = \"adminDeleted\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface AdminAction {\r\n    type: AdminActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function adminDownloadedAction(admin: CompanyModel[]): AdminAction {\r\n    return { type: AdminActionType.adminDownloaded, payload: admin };\r\n}\r\nexport function adminAddedAction(admin: CompanyModel): AdminAction {\r\n    return { type: AdminActionType.adminAdded, payload: admin };\r\n}\r\n\r\nexport function adminUpdatedAction(admin: CompanyModel): AdminAction {\r\n    return { type: AdminActionType.adminUpdated, payload: admin };\r\n}\r\n\r\nexport function adminDeletedAction(id: number): AdminAction {\r\n    return { type: AdminActionType.adminDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function adminReducer(currentState: AdminAppState = new AdminAppState(), action: AdminAction): AdminAppState {\r\n\r\n    const newState = { ...currentState } //Spread Operator\r\n\r\n    switch (action.type) {\r\n        case AdminActionType.adminDownloaded:\r\n            console.log(action.payload);\r\n            newState.admin = action.payload;//ToDo\r\n            break;\r\n        case AdminActionType.adminAdded:\r\n            newState.admin.push(action.payload);//ToDo\r\n            break;\r\n\r\n        case AdminActionType.adminUpdated://ToDo\r\n            break;\r\n        case AdminActionType.adminDeleted:\r\n            newState.admin = newState.admin.filter(c => c.id !== action.payload);//ToDo\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}","\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\n\r\nimport LoginModel from \"../Models/LoginModel\";\r\n\r\nexport class AuthAppState{\r\n    public user: LoginModel = null; \r\n    public constructor(){\r\n        const storedUser = JSON.parse(localStorage.getItem('user'));\r\n        if(storedUser) {\r\n            \r\n            this.user = storedUser;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Step 2 - Define ActionType using enum for all required operations\r\nexport enum AuthActionType {\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: any; // ? for logout\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\n\r\nexport function loginAction(user: LoginModel): AuthAction {\r\n    return { type: AuthActionType.Login ,payload:user};\r\n}\r\n\r\nexport function logoutAction(): AuthAction {\r\n    return { type: AuthActionType.Logout};\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function authReducer(currentState: AuthAppState = new AuthAppState(),\r\n                            action:AuthAction): AuthAppState{\r\n    // const newState = new CatsAppState();\r\n    // newState.cats = currentState.cats;\r\n\r\n    const newState = {...currentState} //Spread Operator\r\n    switch(action.type){\r\n\r\n        case AuthActionType.Login://Payload is logged i user from backend\r\n            newState.user = action.payload;\r\n            localStorage.setItem(\"user\",JSON.stringify(newState.user)); // Saving in the session storage (won't be deleted)\r\n            break;\r\n        case AuthActionType.Logout: // No payload\r\n            newState.user = null;\r\n            localStorage.removeItem(\"user\");\r\n            break;\r\n            \r\n    }\r\n    return newState;\r\n    \r\n}","import CouponModel from \"../Models/CouponModel\";\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class CompanyAppState {\r\n    public company: CouponModel[] = [];\r\n}\r\n\r\n//Step 2 - Define ActionType using enum for all required operations\r\nexport enum CompanyActionType {\r\n    companyDownloaded = \"companyDownloaded\",\r\n    companyAdded = \"companyAdded\",\r\n    companyUpdated = \"companyUpdated\",\r\n    companyDeleted = \"companyDeleted\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface CompanyAction {\r\n    type: CompanyActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function companyDownloadedAction(company: CouponModel[]): CompanyAction {\r\n    return { type: CompanyActionType.companyDownloaded, payload: company };\r\n}\r\nexport function companyAddedAction(company: CouponModel): CompanyAction {\r\n    return { type: CompanyActionType.companyAdded, payload: company };\r\n}\r\n\r\nexport function companyUpdatedAction(company: CouponModel): CompanyAction {\r\n    return { type: CompanyActionType.companyUpdated, payload: company };\r\n}\r\n\r\nexport function companyDeletedAction(id: number): CompanyAction {\r\n    return { type: CompanyActionType.companyDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function companyReducer(currentState: CompanyAppState = new CompanyAppState(), action: CompanyAction): CompanyAppState {\r\n\r\n    const newState = { ...currentState } //Spread Operator\r\n\r\n    switch (action.type) {\r\n        case CompanyActionType.companyDownloaded:\r\n            console.log(action.payload);\r\n            newState.company = action.payload;//ToDo\r\n            break;\r\n        case CompanyActionType.companyAdded:\r\n            newState.company.push(action.payload);//ToDo\r\n            break;\r\n\r\n        case CompanyActionType.companyUpdated://ToDo\r\n            break;\r\n        case CompanyActionType.companyDeleted:\r\n            newState.company = newState.company.filter(c => c.id !== action.payload);//ToDo\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}","import CouponModel from \"../Models/CouponModel\";\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class CustomerPurchaseAppState {\r\n    public customerPurchase: CouponModel[] = [];\r\n}\r\n\r\n//Step 2 - Define ActionType using enum for all required operations\r\nexport enum CustomerPurchaseActionType {\r\n    customerPurchaseDownloaded = \"customerPurchaseDownloaded\",\r\n    customerPurchaseAdded = \"customerPurchaseAdded\",\r\n    customerPurchaseUpdated = \"customerPurchaseUpdated\",\r\n    customerPurchaseDeleted = \"customerPurchaseDeleted\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface CustomerPurchaseAction {\r\n    type: CustomerPurchaseActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function customerPurchaseDownloadedAction(customerPurchase: CouponModel[]): CustomerPurchaseAction {\r\n    return { type: CustomerPurchaseActionType.customerPurchaseDownloaded, payload: customerPurchase };\r\n}\r\nexport function customerPurchaseAddedAction(customerPurchase: CouponModel): CustomerPurchaseAction {\r\n    return { type: CustomerPurchaseActionType.customerPurchaseAdded, payload: customerPurchase };\r\n}\r\n\r\nexport function customerPurchaseUpdatedAction(customerPurchase: CouponModel): CustomerPurchaseAction {\r\n    return { type: CustomerPurchaseActionType.customerPurchaseUpdated, payload: customerPurchase };\r\n}\r\n\r\nexport function customerPurchaseDeletedAction(id: number): CustomerPurchaseAction {\r\n    return { type: CustomerPurchaseActionType.customerPurchaseDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function customerPurchaseReducer(currentState: CustomerPurchaseAppState = new CustomerPurchaseAppState(), action: CustomerPurchaseAction): CustomerPurchaseAppState {\r\n\r\n    const newState = { ...currentState } //Spread Operator\r\n\r\n    switch (action.type) {\r\n        case CustomerPurchaseActionType.customerPurchaseDownloaded:\r\n            console.log(action.payload);\r\n            newState.customerPurchase = action.payload;//ToDo\r\n            break;\r\n        case CustomerPurchaseActionType.customerPurchaseAdded:\r\n            newState.customerPurchase.push(action.payload);//ToDo\r\n            break;\r\n\r\n        case CustomerPurchaseActionType.customerPurchaseUpdated://ToDo\r\n            break;\r\n        case CustomerPurchaseActionType.customerPurchaseDeleted:\r\n            newState.customerPurchase = newState.customerPurchase.filter(c => c.id !== action.payload);//ToDo\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}","import CouponModel from \"../Models/CouponModel\";\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class CustomerAppState {\r\n    public customer: CouponModel[] = [];\r\n}\r\n\r\n//Step 2 - Define ActionType using enum for all required operations\r\nexport enum CustomerActionType {\r\n    customerDownloaded = \"customerDownloaded\",\r\n    customerAdded = \"customerAdded\",\r\n    customerUpdated = \"customerUpdated\",\r\n    customerDeleted = \"customerDeleted\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface CustomerAction {\r\n    type: CustomerActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function customerDownloadedAction(customer: CouponModel[]): CustomerAction {\r\n    return { type: CustomerActionType.customerDownloaded, payload: customer };\r\n}\r\nexport function customerAddedAction(customer: CouponModel): CustomerAction {\r\n    return { type: CustomerActionType.customerAdded, payload: customer };\r\n}\r\n\r\nexport function customerUpdatedAction(customer: CouponModel): CustomerAction {\r\n    return { type: CustomerActionType.customerUpdated, payload: customer };\r\n}\r\n\r\nexport function customerDeletedAction(id: number): CustomerAction {\r\n    return { type: CustomerActionType.customerDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function customerReducer(currentState: CustomerAppState = new CustomerAppState(), action: CustomerAction): CustomerAppState {\r\n\r\n    const newState = { ...currentState } //Spread Operator\r\n\r\n    switch (action.type) {\r\n        case CustomerActionType.customerDownloaded:\r\n            console.log(action.payload);\r\n            newState.customer = action.payload;//ToDo\r\n            break;\r\n        case CustomerActionType.customerAdded:\r\n            newState.customer.push(action.payload);//ToDo\r\n            break;\r\n\r\n        case CustomerActionType.customerUpdated://ToDo\r\n            break;\r\n        case CustomerActionType.customerDeleted:\r\n            newState.customer = newState.customer.filter(c => c.id !== action.payload);//ToDo\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n}","import { combineReducers, createStore } from \"redux\";\r\nimport { adminCustomerReducer } from \"./AdminCustomerState\";\r\nimport { adminReducer } from \"./AdminState\";\r\nimport { authReducer } from \"./AuthState\";\r\nimport { companyReducer } from \"./CompanyState\";\r\nimport { customerPurchaseReducer } from \"./CustomerPurchseState\";\r\nimport { customerReducer } from \"./CustomerState\";\r\n\r\n\r\n\r\nconst reducers = combineReducers({ adminState: adminReducer, adminCustomerState: adminCustomerReducer, companyState: companyReducer, CustomerState: customerReducer, customerPurchaseState: customerPurchaseReducer, authState: authReducer});\r\nconst store = createStore(reducers)\r\n\r\n\r\nexport default store;","import { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Unsubscribe } from \"redux\";\nimport LoginModel from \"../../../Models/LoginModel\";\nimport store from \"../../../Redux/Store\";\nimport \"./AuthMenu.css\";\n\ninterface AuthMenuState {\n  user: LoginModel;\n}\n\nclass AuthMenu extends Component<{}, AuthMenuState> {\n  private unsubscribe: Unsubscribe;\n  public constructor(props: {}) {\n    super(props);\n    this.state = {\n      user: store.getState().authState.user,\n    };\n  }\n\n  public componentDidMount(): void {\n    store.subscribe(() => {\n      this.setState({ user: store.getState().authState.user });\n    });\n  }\n\n  public componentWillUnmount(): void {\n    this.unsubscribe();\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className=\"AuthMenu\">\n        {this.state.user && (\n          <>\n            <span>\n              Hello {this.state.user.clientType.toLowerCase()}\n              {/* Hello There */}\n            </span>\n            <span> | </span>\n            <NavLink to=\"/logout\" className=\"normal\" activeClassName=\"active\">Logout</NavLink>\n          </>\n        )}\n\n        {!this.state.user && (\n          <>\n            <span>Hello Guest</span>\n            <span> | </span>\n            <NavLink to=\"/login\" className=\"normal\" activeClassName=\"active\">Login</NavLink>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AuthMenu;","import \"./Logo.css\";\n\nfunction Logo(): JSX.Element {\n    return (\n        <div className=\"Logo\">\n\t\t\t<img src=\"https://media.giphy.com/media/ADgfsbHcS62Jy/giphy.gif\" alt=\"\" />\n        </div>\n    );\n}\n\nexport default Logo;\n","import AuthMenu from \"../../AuthArea/AuthMenu/AuthMenu\";\nimport Logo from \"../Logo/Logo\";\nimport \"./Header.css\";\n\nfunction Header(): JSX.Element {\n    return (\n        <div className=\"Header\">\n\t\t\t<h1> <p><Logo/>  </p> coupon system    <span> <AuthMenu/> </span></h1 >\n            \n          \n           \n        </div>\n    );\n}\n\nexport default Header;\n","import \"./Main.css\";\n\nfunction Main(): JSX.Element {\n    return (\n        <div className=\"Main\">\n\t\t\t<img src=\"https://media.giphy.com/media/Ayx3dO4xruVqM/giphy.gif\" alt=\"\" />\n        </div>\n    );\n}\n\nexport default Main;\n","import \"./Page404.css\";\n\nfunction Page404(): JSX.Element {\n    return (\n        <div className=\"Page404\">\n\t\t\t<img src=\"https://media.giphy.com/media/3o6ZtpRoYe9wbyfcBi/giphy.gif\" alt=\"\" />\n        </div>\n    );\n}\n\nexport default Page404;\n","import { Notyf } from \"notyf\";\r\n\r\n\r\nexport enum SccMsg {\r\n    ADDED_COUPON = 'Added coupon successfully',\r\n    DOWNLOADED_COUPONS = 'All coupons are here!',\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\",\r\n    REGISTER_SUCCESS = \"REGISTER_SUCCESS\",\r\n    ADDED_COUPONS = \"ADDED_COUPON\",\r\n    GET_COMPANIES = \"GET_COMPANIES\",\r\n    WRONG_LOGIN = \"WRONG USERNAME OR PASSWORD\",\r\n    ADD_COMPANY = \"ADD_COMPANY\",\r\n    ADD_CUSTOMER = \"ADD_CUSTOMER\",\r\n    UPDATE_COMPANY = \"UPDATE_COMPANY\",\r\n    UPDATE_CUSTOMER = \"UPDATE_CUSTOMER\",\r\n    GET_CUSTOMERS = \"GET_CUSTOMERS\",\r\n    DELETE_COMPANY = \"DELETE_COMPANY\",\r\n    DELETE_CUSTOMER = \"DELETE_CUSTOMER\",\r\n    GET_COUPONS = \"GET_COUPONS\",\r\n    DELETE_COUPON = \"DELETE_COUPON\",\r\n    ADD_COUPON = \"ADD_COUPON\",\r\n    UPDATE_COUPON = \"UPDATE_COUPON\",\r\n    GET_COUPONS_PURCHASE = \"GET_COUPONS_PURCHASE\",\r\n    PURCHASED_COUPONS = \"PURCHASED_COUPONS\",\r\n    CONFIRM = \"Are you sure you want to purchase coupon \"\r\n}\r\nexport enum ErrMsg {\r\n    PLS_LOGIN,\r\n    LOGIN_FAILED,\r\n    LOGOUT_FAILED,\r\n    ADD_COMPANY,\r\n    ADD_CUSTOMER,\r\n    UPDATE_COMPANY,\r\n    UPDATE_CUSTOMER,\r\n    GET_COMPANIES,\r\n    GET_CUSTOMERS,\r\n    DELETE_COMPANY,\r\n    DELETE_CUSTOMER,\r\n    GET_COUPONS,\r\n    DELETE_COUPON,\r\n    ADD_COUPON,\r\n    UPDATE_COUPON,\r\n    GET_COUPONS_PURCHASE,\r\n    PURCHASE_COUPON\r\n}\r\nclass Notify {\r\n\r\n    private notification = new Notyf({ duration: 4000, position: { x: \"left\", y: \"top\" } });\r\n    public success(message: string) {\r\n        this.notification.success(message);\r\n    }\r\n\r\n    public error(err: any) {\r\n        const msg = this.extractMsg(err);\r\n        this.notification.error(msg);\r\n    }\r\n\r\n    private extractMsg(err: any): string {\r\n\r\n        if (typeof err === 'string') {\r\n            return err;\r\n        }\r\n\r\n        if (typeof err?.response?.data === 'string') { //Backend exact error\r\n            return err.response.data;\r\n        }\r\n\r\n        if (Array.isArray(err?.response?.data)) { // Backend exact error list\r\n            return err?.response?.data[0];\r\n        }\r\n\r\n        if (typeof err?.message === 'string') {\r\n            return err.message;\r\n        }\r\n        return \"An error occurred, please try again.\";\r\n    }\r\n}\r\nconst notify = new Notify();\r\nexport default notify;","class Globals{\r\n}\r\n\r\nclass DevelopmentGlobals extends Globals{\r\n    public urls = {\r\n        login: \"http://localhost:8080/client/\",\r\n        logout: \"http://localhost:8080/client/\",\r\n        admin : \"http://localhost:8080/admin/\",\r\n        companies: \"http://localhost:8080/companies/\",\r\n        customers: \"http://localhost:8080/customers/\",\r\n        \r\n    }\r\n}\r\n\r\nclass ProductionGlobals extends Globals{\r\n    public urls = {\r\n        login: \"/client/\",\r\n        logout: \"/client/\",\r\n        admin : \"/admin/\",\r\n        companies: \"/companies/\",\r\n        customers: \"/customers/\",\r\n        \r\n    }\r\n}\r\n\r\n// const globals = process.env.NODE_ENV === 'production' ? new ProductionGlobals : new DevelopmentGlobals;\r\nconst globals = new ProductionGlobals();\r\nexport default globals;","import axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport CredentialsModel from \"../../../Models/CredentialsModel\";\nimport LoginModel from \"../../../Models/LoginModel\";\nimport { loginAction } from \"../../../Redux/AuthState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport notify from \"../../../Services/Notification\";\nimport \"./Login.css\";\n\nfunction Login(): JSX.Element {\n    const history = useHistory(); //Redirect function\n    const { register, handleSubmit, formState: {errors} } = useForm<CredentialsModel>();\n\n    async function send(credentials: CredentialsModel) {\n      console.log(credentials);\n      \n  \n      try {\n          let url = \"\";\n          console.log(credentials.clientType);\n          switch (credentials.clientType) {\n              case 'ADMINISTRATOR':\n                  url = globals.urls.admin + \"login\";\n                  break;\n              case 'COMPANY':\n                  url = globals.urls.companies + \"login\";\n                  break;\n              case 'CUSTOMER':\n                  url = globals.urls.customers + \"login\";\n                  break;\n              default:\n                  history.push(\"/home\")\n          }\n          console.log(url);\n          const response = await axios.post<LoginModel>(url, credentials);\n          console.log(response.data);\n          store.dispatch(loginAction(response.data));\n        //   alert(JSON.stringify(response.data))\n          console.log(credentials.clientType);\n          switch (credentials.clientType) {\n              case 'ADMINISTRATOR':\n                  history.push(\"/admin\")\n                  return response.data;\n              case 'COMPANY':\n                  history.push(\"/companies\")\n                  return response.data;\n              case 'CUSTOMER':\n                  history.push(\"/customers\")\n                  return response.data;\n              default:\n                  history.push(\"/home\")\n          }\n          notify.success(\"ok\");\n      }\n      catch (err) {\n          console.log(err);\n          notify.error(\"no no\");\n      }\n\n  }\n\n\n\n    return (\n        <div className=\"Login\">\n            <h2>Login</h2>\n        \n               <form onSubmit={handleSubmit(send)}>\n               <select {...register(\"clientType\", { required: {value:true,message:'Missing User Type'} })}>\n         <option value=\"\" disabled>User Type</option>\n         <option value=\"ADMINISTRATOR\">Administrator</option>\n          <option value=\"CUSTOMER\">Customer</option>\n          <option value=\"COMPANY\">Company</option>\n        </select>\n        <br />\n        <input\n          type=\"text\"\n          placeholder=\"Email\"\n          {...register(\"email\", { required: true, pattern: /^\\S+@\\S+$/i })}\n        />\n        <br />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          {...register(\"password\", {\n            required: true,\n            minLength: 4,\n            maxLength: 22,\n          })}\n        />\n<br />\n\n        <input type=\"submit\" value=\"Login\"/>\n\n      </form>\n\t\t\t\n        </div>\n    );\n}\n\nexport default Login;","import \"./EmptyView.css\";\n\ninterface EmptyViewProps {\n\tmsg: string;\n}\n\nfunction EmptyView(props: EmptyViewProps): JSX.Element {\n    return (\n        <div className=\"EmptyView\">\n            <h2>{props.msg}</h2>\n\t\t\t<img src=\"https://media.giphy.com/media/dZdadd8KqjgsJGjMVp/giphy.gif\" alt=\"\" />\n        </div>\n    );\n}\n\nexport default EmptyView;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { logoutAction } from \"../../../Redux/AuthState\";\nimport store from \"../../../Redux/Store\";\nimport notify, { SccMsg } from \"../../../Services/Notification\";\n\n\nfunction Logout(): JSX.Element {\n    const history = useHistory();\n\n    useEffect(()=> //React Hook for running side effects inside a fc\n    { \n        notify.success(SccMsg.LOGOUT_SUCCESS);\n        store.dispatch(logoutAction());\n        history.push(\"/home\");\n    });\n\n    \n    return (\n        <></>\n    );\n}\n\nexport default Logout;","\r\nimport axios from 'axios';\r\nimport store from '../Redux/Store';\r\n\r\nconst tokenAxios = axios.create();\r\n\r\ntokenAxios.interceptors.request.use(request => {\r\n\r\n    request.headers = {\r\n        \"authorization\": store.getState().authState.user?.token\r\n    };\r\n\r\n    return request;\r\n});\r\n\r\nexport default tokenAxios;","import { Component } from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport { adminDeletedAction, adminDownloadedAction } from \"../../../Redux/AdminState\";\nimport store from \"../../../Redux/Store\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\nimport { Unsubscribe } from \"redux\";\nimport \"./Admin.css\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport { adminCustomerDeletedAction, adminCustomerDownloadedAction } from \"../../../Redux/AdminCustomerState\";\nimport globals from \"../../../Services/Globals\";\n\n\ninterface AdminState {\n    companies: CompanyModel[];\n    customers: CustomerModel[];\n}\n\nclass Admin extends Component<{}, AdminState> {\n    private unsubscribe: Unsubscribe;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n            companies: store.getState().adminState.admin,\n            customers: store.getState().adminCustomerState.adminCustomer,\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.unsubscribe = store.subscribe(() => {\n            this.setState({\n                companies: store.getState().adminState.admin,\n                customers: store.getState().adminCustomerState.adminCustomer\n            });\n        });\n\n        try {\n            const response = await tokenAxios.get<CompanyModel[]>(globals.urls.admin +\"companies\"); //async request\n            console.log(response.status);\n            store.dispatch(adminDownloadedAction(response.data)); //update global state\n            this.setState({ companies: response.data }); //update local state\n            notify.success(SccMsg.GET_COMPANIES);\n        } catch (err) {\n\n            notify.error(ErrMsg.GET_COMPANIES);\n        }\n\n        try {\n            const response = await tokenAxios.get<CompanyModel[]>(globals.urls.admin + \"customers\"); //async request\n            console.log(response.status);\n            store.dispatch(adminCustomerDownloadedAction(response.data)); //update global state\n            this.setState({ customers: response.data }); //update local state\n            notify.success(SccMsg.GET_CUSTOMERS);\n        } catch (err) {\n\n            notify.error(ErrMsg.GET_CUSTOMERS);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.unsubscribe();\n    }\n\n    private async delete(id: number) {\n        const res = window.confirm(\n            \"Are you sure you want to delete id=\" + id + \"?\"\n        );\n        if (res) {\n            try {\n                await tokenAxios.delete<any>(globals.urls.admin + \"company/\" + id);\n                store.dispatch(adminDeletedAction(id)); // global state\n                this.setState({ companies: store.getState().adminState.admin }); //local state\n                notify.success(SccMsg.DELETE_COMPANY)\n            } catch (err) {\n                notify.error(ErrMsg.DELETE_COMPANY);\n            }\n        }\n    }\n    private async deleteCustomer(id: number) {\n        const res = window.confirm(\n            \"Are you sure you want to delete id=\" + id + \"?\"\n        );\n        if (res) {\n            try {\n                await tokenAxios.delete<any>(globals.urls.admin + \"customer/\" + id);\n                store.dispatch(adminCustomerDeletedAction(id)); // global state\n                this.setState({ customers: store.getState().adminCustomerState.adminCustomer }); //local state\n                notify.success(SccMsg.DELETE_CUSTOMER)\n            } catch (err) {\n                notify.error(ErrMsg.DELETE_CUSTOMER);\n            }\n        }\n    }\n    public render(): JSX.Element {\n        return (\n            <div className=\"Admin\">\n                <h1>Companies</h1>\n                {this.state.companies.length === 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th>Email</th>\n                                <th>Password</th>\n                                <th>\n                                    Actions{\" \"}\n                                    <NavLink style={{ textDecoration: \"none\" }} to=\"admin/company/add\">\n                                        ➕\n                                    </NavLink>\n                                </th>\n                            </tr>\n                        </thead>\n                    </table>\n                )}\n                {this.state.companies.length !== 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th>Email</th>\n                                <th>Password</th>\n                                <th>\n                                    Actions{\" \"}\n                                    <NavLink style={{ textDecoration: \"none\" }} to=\"admin/company/add\">\n                                        <a className=\"plus\">+</a>\n                                    </NavLink>\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.companies.map((c) => (\n                                <tr key={c.id}>\n                                    <td>{c.id}</td>\n                                    <td>{c.name}</td>\n                                    <td>{c.email}</td>\n                                    <td>{c.password}</td>\n                                    <td>\n                                        <button onClick={() => this.delete(c.id)}>🗑️</button>\n                                        <NavLink\n                                            style={{ textDecoration: \"none\" }}\n                                            to={\"admin/company/update/\" + c.id}\n                                        > 🖋️ </NavLink>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n                <br />\n\n                <h1>Customers</h1>\n                {this.state.customers.length === 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email</th>\n                                <th>Password</th>\n                                <th>\n                                    Actions{\" \"}\n                                    <NavLink style={{ textDecoration: \"none\" }} to=\"admin/customer/add\">\n                                        ➕\n                                    </NavLink>\n                                </th>\n                            </tr>\n                        </thead>\n                    </table>\n                )}\n                {this.state.customers.length !== 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>First Name</th>\n                                <th>Last Name</th>\n                                <th>Email</th>\n                                <th>Password</th>\n                                <th>\n                                    Actions{\" \"}\n                                    <NavLink style={{ textDecoration: \"none\" }} to=\"admin/customer/add\">\n                                        <a className=\"plus\">+</a>\n                                    </NavLink>\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.customers.map((c) => (\n                                <tr key={c.id}>\n                                    <td>{c.id}</td>\n                                    <td>{c.firstName}</td>\n                                    <td>{c.lastName}</td>\n                                    <td>{c.email}</td>\n                                    <td>{c.password}</td>\n                                    <td>\n                                        <button onClick={() => this.deleteCustomer(c.id)}>🗑️</button>\n                                        <NavLink\n                                            style={{ textDecoration: \"none\" }}\n                                            to={\"admin/customer/update/\" + c.id}\n                                        > 🖋️ </NavLink>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n            </div>\n        );\n    }\n}\n\nexport default Admin;","\nimport Admin from \"./Admin/Admin\";\nimport \"./AdminArea.css\";\n\nfunction AdminArea(): JSX.Element {\n    return (\n        <div className=\"AdminArea\">\n            <Admin/>\n        </div>\n    );\n}\n\nexport default AdminArea;\n","enum ClientType {\r\n    admin = \"ADMINISTRATOR\",\r\n    company = \"COMPANY\",\r\n    customer = \"CUSTOMER\",\r\n\r\n}\r\n\r\nexport default ClientType;","import { Component } from \"react\";\nimport { Unsubscribe } from \"redux\";\nimport ClientType from \"../../../Models/ClientTypeModel\";\n\nimport CouponModel from \"../../../Models/CouponModel\";\nimport LoginModel from \"../../../Models/LoginModel\";\n\nimport { customerPurchaseAddedAction, customerPurchaseDownloadedAction } from \"../../../Redux/CustomerPurchseState\";\nimport { customerDownloadedAction } from \"../../../Redux/CustomerState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\nimport \"./Customer.css\";\n\ninterface CustomerState {\n    coupons: CouponModel[];\n    couponsPurchase: CouponModel[];\n    user: LoginModel;\n\n}\n\nclass Customer extends Component<{}, CustomerState> {\n\n    private unsubscribe: Unsubscribe;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n            coupons: store.getState().CustomerState.customer,\n            couponsPurchase: store.getState().customerPurchaseState.customerPurchase,\n            user: store.getState().authState.user\n        };\n    }\n   \n    public async componentDidMount(): Promise<void> {\n        console.log(this.state.user?.clientType);\n        console.log(ClientType.customer);\n        if (this.state.user?.clientType !== ClientType.customer) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            //redirect to login\n        }\n        this.unsubscribe = store.subscribe(() => {\n            this.setState({\n                coupons: store.getState().CustomerState.customer,\n                couponsPurchase: store.getState().customerPurchaseState.customerPurchase\n            });\n        });\n\n        try {\n            const response = await tokenAxios.get<CouponModel[]>(globals.urls.customers + \"allCoupons\"); //async request\n            store.dispatch(customerDownloadedAction(response.data)); //update global state\n            this.setState({ coupons: response.data }); //update local state\n            notify.success(SccMsg.GET_COUPONS);\n\n        } catch (err) {\n            notify.error(ErrMsg.GET_COUPONS);\n        }\n        try {\n            const response1 = await tokenAxios.get<CouponModel[]>(globals.urls.customers + \"coupons\"); //async request\n            console.log(response1.status);\n            store.dispatch(customerPurchaseDownloadedAction(response1.data)); //update global state\n            this.setState({ couponsPurchase: response1.data }); //update local state\n            notify.success(SccMsg.GET_COUPONS_PURCHASE);\n\n        } catch (err) {\n            notify.error(ErrMsg.GET_COUPONS_PURCHASE);\n        }\n    }\n    public componentWillUnmount(): void {\n        this.unsubscribe();\n    }\n\n    private async purchase(c: CouponModel) {\n        const res =  window.confirm(\n            \"Are you sure you want to purchase coupon \" + c.title + \"?\"\n        );\n        if (res) {\n            try {\n                await tokenAxios.post<any>(globals.urls.customers + \"coupons/\" + c.id);\n                store.dispatch(customerPurchaseAddedAction(c)); // global state\n                this.setState({ couponsPurchase: store.getState().customerPurchaseState.customerPurchase }); //local state\n\n            } catch (err) {\n                notify.error(ErrMsg.PURCHASE_COUPON);\n            }\n            try {\n                const response = await tokenAxios.get<CouponModel[]>(globals.urls.customers + \"allCoupons\"); //async request\n                store.dispatch(customerDownloadedAction(response.data)); //update global state\n                this.setState({ coupons: response.data })\n            } catch (err) {\n                notify.error(ErrMsg.GET_COUPONS);\n            }\n        }\n    }\n\n    getDate(date: Date): string {\n        const myDate = new Date(date);\n        const year = myDate.getFullYear();\n        const month = (\"0\" + (myDate.getMonth() + 1)).slice(-2);\n        const day = (\"0\" + myDate.getDate()).slice(-2);\n        const newDate = day + \"-\" + month + \"-\" + year;\n        return newDate;\n    }\n    public render(): JSX.Element {\n        return (\n            <div className=\"Customer\">\n                <h1>Purchased Coupons</h1>\n                {this.state.couponsPurchase.length === 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>CATEGORY</th>\n                                <th>TITLE</th>\n                                <th>PRICE</th>\n                                <th>AMOUNT</th>\n                                <th>DESCRIPTION</th>\n                                <th>START_DATE</th>\n                                <th>END_DATE</th>\n                            </tr>\n                        </thead>\n                    </table>)}\n                {this.state.couponsPurchase.length !== 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>CATEGORY</th>\n                                <th>TITLE</th>\n                                <th>PRICE</th>\n                                <th>DESCRIPTION</th>\n                                <th>START_DATE</th>\n                                <th>END_DATE</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.couponsPurchase.map((c) => (\n                                <tr key={c.id}>\n                                    <td>{c.category}</td>\n                                    <td>{c.title}</td>\n                                    <td>{c.price}</td>\n                                    <td>{c.description}</td>\n                                    <td>{this.getDate(c.startDate)}</td>\n                                    <td>{this.getDate(c.endDate)}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n\n                <h1>ALL Coupons</h1>\n                {this.state.coupons.length !== 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>CATEGORY</th>\n                                <th>TITLE</th>\n                                <th>PRICE</th>\n                                <th>AMOUNT</th>\n                                <th>DESCRIPTION</th>\n                                <th>START_DATE</th>\n                                <th>END_DATE</th>\n                                <th>\n                                    Action\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.coupons.map((c) => (\n                                <tr key={c.id}>\n                                    <td>{c.category}</td>\n                                    <td>{c.title}</td>\n                                    <td>{c.price}</td>\n                                    <td>{c.amount}</td>\n                                    <td>{c.description}</td>\n                                    <td>{this.getDate(c.startDate)}</td>\n                                    <td>{this.getDate(c.endDate)}</td>\n                                    <td>\n                                        <button onClick={() => this.purchase(c)}>Purchase</button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        );\n    }\n}\n\n\nexport default Customer;\n","import { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport CouponModel from \"../../../Models/CouponModel\";\r\nimport { companyDeletedAction, companyDownloadedAction } from \"../../../Redux/CompanyState\";\r\nimport store from \"../../../Redux/Store\";\r\nimport globals from \"../../../Services/Globals\";\r\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\r\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\r\nimport \"./Company.css\";\r\n\r\ninterface CompanyState {\r\n    coupons: CouponModel[];\r\n}\r\n\r\nclass Company extends Component<{}, CompanyState> {\r\n    private unsubscribe: Unsubscribe;\r\n\r\n    public constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            coupons: store.getState().companyState.company,\r\n        };\r\n    }\r\n\r\n    public async componentDidMount(): Promise<void> {\r\n        this.unsubscribe = store.subscribe(() => {\r\n            this.setState({ coupons: store.getState().companyState.company });\r\n        });\r\n\r\n        try {\r\n            const response = await tokenAxios.get<CouponModel[]>(globals.urls.companies + \"coupons\"); //async request\r\n            console.log(response.status);\r\n            store.dispatch(companyDownloadedAction(response.data)); //update global state\r\n            this.setState({ coupons: response.data }); //update local state\r\n            notify.success(SccMsg.GET_COUPONS);\r\n        } catch (err) {\r\n            notify.error(ErrMsg.GET_COUPONS);\r\n        }\r\n    }\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribe();\r\n    }\r\n    private async delete(id: number) {\r\n        const res = window.confirm(\r\n            \"Are you sure you want to delete id=\" + id + \"?\"\r\n        );\r\n        if (res) {\r\n            try {\r\n                await tokenAxios.delete<any>(globals.urls.companies + \"coupons/\" + id);\r\n                store.dispatch(companyDeletedAction(id)); // global state\r\n                this.setState({ coupons: store.getState().companyState.company }); //local state\r\n                notify.success(SccMsg.DELETE_COUPON)\r\n            } catch (err) {\r\n                notify.error(ErrMsg.DELETE_COUPON);\r\n            }\r\n        }\r\n    }\r\n    getDate(date: Date): string {\r\n        const myDate = new Date(date);\r\n        const year = myDate.getFullYear();\r\n        const month = (\"0\" + (myDate.getMonth() + 1)).slice(-2);\r\n        const day = (\"0\" + myDate.getDate()).slice(-2);\r\n        const newDate = day + \"-\" + month + \"-\" + year;\r\n        return newDate;\r\n    }\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"Company\">\r\n                <h1>Company Coupons</h1>\r\n                {this.state.coupons.length === 0 && (\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>COMPANY ID</th>\r\n                                <th>CATEGORY</th>\r\n                                <th>TITLE</th>\r\n                                <th>PRICE</th>\r\n                                <th>AMOUNT</th>\r\n                                <th>DESCRIPTION</th>\r\n                                <th>START_DATE</th>\r\n                                <th>END_DATE</th>\r\n                                <th>\r\n                                    Actions{\" \"}\r\n                                    <NavLink style={{ textDecoration: \"none\" }} to=\"/companies/coupon/add\">\r\n                                        <a className=\"plus\">+</a>\r\n                                    </NavLink>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                    </table>\r\n                )}\r\n                {this.state.coupons.length !== 0 && (\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>COMPANY ID</th>\r\n                                <th>CATEGORY</th>\r\n                                <th>TITLE</th>\r\n                                <th>PRICE</th>\r\n                                <th>AMOUNT</th>\r\n                                <th>DESCRIPTION</th>\r\n                                <th>START_DATE</th>\r\n                                <th>END_DATE</th>\r\n                                <th>\r\n                                    Actions{\" \"}\r\n                                    <NavLink style={{ textDecoration: \"none\" }} to=\"/companies/coupon/add\">\r\n                                        <a className=\"plus\">+</a>\r\n                                    </NavLink>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.coupons.map((c) => (\r\n                                <tr key={c.id}>\r\n                                    <td>{c.id}</td>\r\n                                    <td>{c.companyID}</td>\r\n                                    <td>{c.category}</td>\r\n                                    <td>{c.title}</td>\r\n                                    <td>{c.price}</td>\r\n                                    <td>{c.amount}</td>\r\n                                    <td>{c.description}</td>\r\n                                    <td>{this.getDate(c.startDate)}</td>\r\n                                    <td>{this.getDate(c.endDate)}</td>\r\n                                    <td>\r\n                                        <button onClick={() => this.delete(c.id)}>🗑️ </button>\r\n                                        <NavLink\r\n                                            style={{ textDecoration: \"none\" }}\r\n                                            to={\"companies/coupon/update/\" + c.id}\r\n                                        > 🖋️ </NavLink>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Company;","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport { adminAddedAction } from \"../../../Redux/AdminState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\n\nimport \"./AddCompany.css\";\n\nfunction AddCompany(): JSX.Element {\n    const { register, handleSubmit, formState: { errors, isDirty, isValid } } = useForm<CompanyModel>({\n        mode: \"onTouched\"\n    });\n    // const onSubmit: SubmitHandler<CompanyModel> = data => console.log(data);\n    const history = useHistory();\n\n    useEffect(() => {\n        // If we don't have a user object - we are not logged in\n        if (!store.getState().authState.user) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            history.push(\"/login\")\n        }\n    })\n\n    async function send(company: CompanyModel) {\n        console.log(company);\n        try {\n            // const formData = new FormData();\n            // formData.append(\"name\", company.name);\n            // formData.append(\"email\", company.email);\n            // formData.append(\"password\", company.password);\n\n            //Sending token without interceptor\n            // const headers = {\"authorization\": store.getState().authState.user.token}\n            // const response = await axios.post<CompanyModel>(globals.urls.admin+\"/company\",company,{headers});\n            //Sending token with interceptor\n            const response = await tokenAxios.put<CompanyModel>(globals.urls.admin + \"company\", company);\n            const added = response.data;\n            store.dispatch(adminAddedAction(added)); //With Redux\n            notify.success(SccMsg.ADD_COMPANY)\n            history.push('/admin')\n        }\n        catch (err) {\n            console.log(ErrMsg.ADD_COMPANY);\n            //  notify.error(err.message);\n        }\n    }\n    return (\n        <div className=\"AddCompany\">\n            <h2>Add Company</h2>\n            <form onSubmit={handleSubmit(send)}>\n                <label>Name</label>\n                <br />\n                <input type=\"name\" name=\"name\"\n                    {...register(\"name\", {\n                        required: true,\n                        minLength: 2\n                    })} />\n                <br />\n                {errors.name?.type === 'required' && <span>missing name</span>}\n                {errors.name?.type === 'minLength' && <span>name is too short</span>}\n                <br />\n\n                <label>Email</label> <br />\n                <input type=\"email\" name=\"email\"\n                    {...register(\"email\")} />\n                <br />\n                <span>{errors.email?.message}</span>\n                <br />\n\n                <label>Password</label> <br />\n                <input type=\"password\" name=\"password\"\n                    {...register(\"password\", { required: true })} />\n\n                <br />\n                {errors.password && <span>missing password</span>}\n                <br />\n\n                <button type=\"submit\" disabled={!isDirty || !isValid} color=\"primary\">Add</button>\n            </form>\n        </div>\n    );\n}\n\nexport default AddCompany;","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport { adminCustomerAddedAction } from \"../../../Redux/AdminCustomerState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\n\nimport \"./AddCustomer.css\";\n\nfunction AddCustomer(): JSX.Element {\n    const { register, handleSubmit, formState: { errors, isDirty, isValid } } = useForm<CustomerModel>({\n        mode: \"onTouched\"\n    });\n    // const onSubmit: SubmitHandler<CustomerModel> = data => console.log(data);\n    const history = useHistory();\n\n    useEffect(() => {\n        // If we don't have a user object - we are not logged in\n        if (!store.getState().authState.user) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            history.push(\"/login\")\n        }\n    })\n\n    async function send(customer: CustomerModel) {\n        console.log(customer);\n        try {\n\n            const response = await tokenAxios.put<CustomerModel>(globals.urls.admin + \"customer\", customer);\n            const added = response.data;\n            store.dispatch(adminCustomerAddedAction(added)); //With Redux\n            notify.success(SccMsg.ADD_CUSTOMER)\n            history.push('/admin')\n        }\n        catch (err) {\n            notify.error(ErrMsg.ADD_CUSTOMER);\n        }\n    }\n    return (\n        <div className=\"AddCustomer\">\n            <h2>Add Customer</h2>\n            <form onSubmit={handleSubmit(send)}>\n                <label>First Name</label>\n                <br />\n                <input type=\"firstName\" name=\"firstName\"\n                    {...register(\"firstName\", {\n                        required: true,\n                        minLength: 2\n                    })} />\n                <br />\n                {errors.firstName?.type === 'required' && <span>missing firstName</span>}\n                {errors.firstName?.type === 'minLength' && <span>firstName is too short</span>}\n                <br />\n\n                <label>Last Name</label>\n                <br />\n                <input type=\"lastName\" name=\"lastName\"\n                    {...register(\"lastName\", {\n                        required: true,\n                        minLength: 2\n                    })} />\n                <br />\n                {errors.lastName?.type === 'required' && <span>missing lastName</span>}\n                {errors.lastName?.type === 'minLength' && <span>lastName is too short</span>}\n                <br />\n\n                <label>Email</label> <br />\n                <input type=\"email\" name=\"email\"\n                    {...register(\"email\")} />\n                <br />\n                <span>{errors.email?.message}</span>\n                <br />\n\n                <label>Password</label> <br />\n                <input type=\"password\" name=\"password\"\n                    {...register(\"password\", { required: true })} />\n\n                <br />\n                {errors.password && <span>missing password</span>}\n                <br />\n\n                <button type=\"submit\" disabled={!isDirty || !isValid} color=\"primary\">Add</button>\n            </form>\n        </div>\n    );\n}\n\nexport default AddCustomer;","import { grey } from \"@material-ui/core/colors\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\nimport CompanyModel from \"../../../Models/CompanyModel\";\nimport { adminUpdatedAction } from \"../../../Redux/AdminState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\nimport \"./UpdateCompany.css\";\n\ninterface RouteParam {\n    id: string;\n}\ninterface CompanyDetailsProps extends RouteComponentProps<RouteParam> { }\n\nfunction UpdateCompany(props: CompanyDetailsProps): JSX.Element {\n    const { register, handleSubmit, formState: { errors, isDirty, isValid } } = useForm<CompanyModel>({\n        mode: \"onTouched\"\n    });\n    const history = useHistory();\n    const id = +props.match.params.id;\n    const [company, setCompany] = useState(\n        store.getState().adminState.admin.find((c) => c.id === id)\n    );\n    useEffect(() => {\n        // If we don't have a user object - we are not logged in\n        if (!store.getState().authState.user) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            history.push(\"/login\")\n        }\n    })\n    async function send(company: CompanyModel) {\n        console.log(company);\n        try {\n            const response = await tokenAxios.post<CompanyModel>(globals.urls.admin + \"company\", company);\n            const added = response.data;\n            store.dispatch(adminUpdatedAction(added)); //With Redux\n            notify.success(SccMsg.UPDATE_COMPANY)\n            history.push('/admin')\n        }\n        catch (err) {\n            notify.error(ErrMsg.UPDATE_COMPANY);\n        }\n    }\n    return (\n        <div className=\"UpdateCompany\">\n            <h2>Update Company</h2>\n            {/* <br /> */}\n            <form onSubmit={handleSubmit(send)}>\n            {/* <label>Id</label> */}\n                {/* <br /> */}\n                <input type=\"hidden\" name=\"id\"\n                    value={company?.id}\n                    {...register(\"id\")} \n                    color={\"grey\"}\n                    />\n                <br />\n                <label>Name</label>\n                <br />\n                <input type=\"name\" name=\"name\"\n                    value={company?.name}\n                    {...register(\"name\")}\n\n                     />\n                <br />\n                <label>Email</label> <br />\n                <input type=\"email\" name=\"email\"\n                    defaultValue={company.email}\n                    {...register(\"email\", { required: true })} />\n                <br />\n                <span>{errors.email?.message}</span>\n                {errors.email && <span>missing email</span>}\n                <br />\n\n                <label>Password</label> <br />\n                <input type=\"password\" name=\"password\"\n                    {...register(\"password\", { required: true })} />\n                <br />\n                {errors.password && <span>missing password</span>}\n                <br />\n\n                <button type=\"submit\" color=\"primary\">Update</button>\n            </form>\n        </div>\n    );\n}\n\nexport default UpdateCompany;","\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\nimport CustomerModel from \"../../../Models/CustomerModel\";\nimport { adminCustomerUpdatedAction } from \"../../../Redux/AdminCustomerState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\nimport \"./UpdateCustomer.css\";\n\ninterface RouteParam {\n    id: string;\n}\ninterface CustomerDetailsProps extends RouteComponentProps<RouteParam> { }\n\nfunction UpdateCustomer(props: CustomerDetailsProps): JSX.Element {\n    const { register, handleSubmit, formState: { errors, isDirty, isValid } } = useForm<CustomerModel>({\n        mode: \"onTouched\"\n    });\n    const history = useHistory();\n    const id = +props.match.params.id;\n    const [customer, setCustomer] = useState(\n        store.getState().adminCustomerState.adminCustomer.find((c) => c.id === id)\n    );\n    useEffect(() => {\n        // If we don't have a user object - we are not logged in\n        if (!store.getState().authState.user) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            history.push(\"/login\")\n        }\n    })\n    async function send(customer: CustomerModel) {\n        console.log(customer);\n        try {\n            const response = await tokenAxios.post<CustomerModel>(globals.urls.admin + \"customer\", customer);\n            const added = response.data;\n            store.dispatch(adminCustomerUpdatedAction(added)); //With Redux\n            notify.success(SccMsg.UPDATE_CUSTOMER)\n            history.push('/admin')\n        }\n        catch (err) {\n            notify.error(ErrMsg.UPDATE_CUSTOMER);\n        }\n    }\n    return (\n        <div className=\"UpdateCustomer\">\n            <h2>Update Customer</h2>\n            <br />\n            <form onSubmit={handleSubmit(send)}>\n                {/* <label>Id</label> */}\n                <br />\n                <input type=\"hidden\" name=\"id\"\n                        // type=\"hidden\"\n                    value={customer?.id}\n                    {...register(\"id\")} \n                   \n                    />\n                <br />\n                <label>First Name</label>\n                <br />\n                <input type=\"firstName\" name=\"firstName\"\n                    value={customer?.firstName}\n                    {...register(\"firstName\")}\n                  />\n                <br />\n                <label>Last Name</label>\n                <br />\n                <input type=\"lastName\" name=\"lastName\"\n                    value={customer?.lastName}\n                    {...register(\"lastName\")}\n                     />\n                <br />\n                <label>Email</label> <br />\n                <input type=\"email\" name=\"email\"\n                    defaultValue={customer.email}\n                    {...register(\"email\", { required: true })} />\n                <br />\n                <span>{errors.email?.message}</span>\n                {errors.email && <span>missing email</span>}\n                <br />\n\n                <label>Password</label> <br />\n                <input type=\"password\" name=\"password\"\n                    {...register(\"password\", { required: true })} />\n                <br />\n                {errors.password && <span>missing password</span>}\n                <br />\n\n                <button type=\"submit\" color=\"primary\">Update</button>\n            </form>\n        </div>\n    );\n}\n\nexport default UpdateCustomer;","enum CategoryType {\r\n    food = \"FOOD\",\r\n    electricity = \"ELECTRICITY\",\r\n    cars = \"CARS\",\r\n    vacation = \"VACATION\"\r\n}\r\n\r\nexport default CategoryType;","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\r\nimport CategoryType from \"../../Models/CategoryTypeModel\";\r\nimport CouponModel from \"../../Models/CouponModel\";\r\nimport { companyAddedAction } from \"../../Redux/CompanyState\";\r\nimport store from \"../../Redux/Store\";\r\nimport globals from \"../../Services/Globals\";\r\nimport tokenAxios from \"../../Services/InterceptorAxios\";\r\nimport notify, { ErrMsg, SccMsg } from \"../../Services/Notification\";\r\n\r\nimport \"./AddCompanyCoupon.css\";\r\ninterface RouteParam{\r\n    id: string;\r\n}\r\n\r\ninterface CouponDetailsProps extends RouteComponentProps<RouteParam>{}\r\n\r\nfunction AddCompanyCoupon(): JSX.Element {\r\n    const { register, handleSubmit, formState: { errors, isDirty, isValid } } = useForm<CouponModel>({\r\n        mode: \"onTouched\"\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        // If we don't have a user object - we are not logged in\r\n        if (!store.getState().authState.user) {\r\n            notify.error(ErrMsg.PLS_LOGIN);\r\n            history.push(\"/login\")\r\n        }\r\n    })\r\n    async function send(coupon: CouponModel) {\r\n        console.log(coupon);\r\n        try {\r\n            let fdate = new Date(coupon.startDate).setHours(0, 0, 0, 0);\r\n            let tdate = new Date(coupon.endDate).setHours(0, 0, 0, 0);\r\n            let cdate = new Date().setHours(0, 0, 0, 0);\r\n\r\n            if (fdate.valueOf() > tdate.valueOf()) {\r\n                alert(\"endDate can't be less then startDate\")\r\n                return;\r\n            } else if (fdate.valueOf() < cdate.valueOf()) {\r\n                alert(\"startDate can't be less then current Date\")\r\n                return;\r\n            }\r\n            const response = await tokenAxios.post<CouponModel>(globals.urls.companies + \"coupon\", coupon);\r\n            const added = response.data;\r\n            console.log(\" added object \" + added);\r\n            store.dispatch(companyAddedAction(added)); //With Redux\r\n            notify.success(SccMsg.ADD_COUPON);\r\n            history.push('/companies')\r\n        }\r\n        catch (err) {\r\n            notify.error(ErrMsg.ADD_COUPON);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"AddCompanyCoupon\">\r\n            <h2>Add Company Coupon</h2>\r\n            <form onSubmit={handleSubmit(send)}>\r\n                <label>Category</label>\r\n                <br />\r\n                <select name=\"category\" {...register(\"category\")}>\r\n                    <option value={CategoryType.food}>FOOD</option>\r\n                    <option value={CategoryType.electricity}>ELECTRICITY</option>\r\n                    <option value={CategoryType.vacation}>VACATION</option>\r\n                    <option value={CategoryType.cars}>CARS</option>\r\n\r\n                </select>\r\n                <br />\r\n\r\n                <br />\r\n                <label>company ID</label>\r\n                <br />\r\n                <input type=\"text\" name=\"company ID\"\r\n                    {...register(\"companyID\", {\r\n                        \r\n                        required: true,\r\n                    \r\n                    })} />\r\n                <br />\r\n                <br />\r\n                <label>Title</label>\r\n                <br />\r\n                <input type=\"text\" name=\"title\"\r\n                    {...register(\"title\", {\r\n                        required: true,\r\n                        minLength: 2\r\n                    })} />\r\n                <br />\r\n                <br />\r\n                <label>Price</label>\r\n                <br />\r\n                <input type=\"double\" name=\"price\"\r\n                    {...register(\"price\", {\r\n                        required: true,\r\n                    })} />\r\n                <br />\r\n                <br />\r\n                <label>Amount</label>\r\n                <br />\r\n                <input type=\"amount\" name=\"amount\"\r\n                    {...register(\"amount\", {\r\n                        required: true,\r\n                        min: 0\r\n                    })} />\r\n                <br />\r\n                {errors.amount?.type === 'min' && <span>minimum amount should be zero</span>}\r\n                <br />\r\n                <label>Description</label>\r\n                <br />\r\n                <input type=\"text\" name=\"description\"\r\n                    {...register(\"description\", {\r\n                        required: true,\r\n                        minLength: 2\r\n                    })} />\r\n                <br />\r\n                {errors.description?.type === 'minLength' && <span>minimum description length is 10</span>}\r\n                <br />\r\n                <label>Start Date</label>\r\n                <br />\r\n                <input type=\"date\" name=\"start_date\"\r\n                    {...register(\"startDate\", {\r\n                        required: true,\r\n                    })} />\r\n                <br />\r\n                <br />\r\n                <label>End Date</label>\r\n                <br />\r\n                <input type=\"date\" name=\"end_date\"\r\n                    {...register(\"endDate\", {\r\n                        required: true,\r\n                    })} />\r\n                <br />\r\n                <br />\r\n                <button type=\"submit\">Add Coupon</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCompanyCoupon;","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport { companyUpdatedAction } from \"../../../Redux/CompanyState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\nimport \"./UpdateCompanyCoupon.css\";\n\n\ninterface RouteParam {\n    id: string;\n}\ninterface CouponDetailsProps extends RouteComponentProps<RouteParam> { }\n\nfunction UpdateCompanyCoupon(props: CouponDetailsProps): JSX.Element {\n    const { register, handleSubmit, formState: { errors, isDirty, isValid } } = useForm<CouponModel>({\n        mode: \"onTouched\"\n    });\n    const history = useHistory();\n    const id = +props.match.params.id;\n    const [coupon, setCompany] = useState(\n        store.getState().companyState.company.find((c) => c.id === id)\n    );\n    useEffect(() => {\n        // If we don't have a user object - we are not logged in\n        if (!store.getState().authState.user) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            history.push(\"/login\")\n        }\n    })\n\n    async function send(coupon: CouponModel) {\n\n        console.log(coupon);\n        try {\n            let fdate = new Date(coupon.startDate).setHours(0, 0, 0, 0);\n            let tdate = new Date(coupon.endDate).setHours(0, 0, 0, 0);\n            let cdate = new Date().setHours(0, 0, 0, 0);\n            if (fdate.valueOf() > tdate.valueOf()) {\n                alert(\"endDate can't be less then startDate\")\n                return;\n            } else if (tdate.valueOf() < cdate.valueOf()) {\n                alert(\"startDate can't be less then current Date\")\n                return;\n            }\n            coupon.image = \"none\";\n            coupon.id = +props.match.params.id;\n            const response = await tokenAxios.put<CouponModel>(globals.urls.companies + \"coupons\", coupon);\n            const updated = response.data;\n            store.dispatch(companyUpdatedAction(updated)); //With Redux\n            notify.success(SccMsg.UPDATE_COUPON)\n            history.push('/companies')\n        }\n        catch (err) {\n            notify.error(ErrMsg.UPDATE_COUPON);\n        }\n    }\n    function getDate(date: Date): string {\n        const myDate = new Date(date);\n        const year = myDate.getFullYear();\n        const month = (\"0\" + (myDate.getMonth() + 1)).slice(-2);\n        const day = (\"0\" + myDate.getDate()).slice(-2);\n        const newDate = year + \"-\" + month + \"-\" + day;\n        return newDate;\n    }\n    return (\n        <div className=\"UpdateCompanyCoupon\">\n            <h2>Update Company Coupon</h2>\n            <br />\n            <form onSubmit={handleSubmit(send)}>\n\n                <label>Category</label>\n                <br />\n                <input type=\"category\" name=\"category\"\n                    value={coupon.category}\n                    {...register(\"category\")} />\n                <br />\n\n                <label>Id</label>\n                <br />\n                <input type=\"number\" name=\"id\"\n                    value={coupon.id}\n                    {...register(\"id\")} />\n                <br />\n\n                <label>Company Id</label>\n                <br />\n                <input type=\"text\" name=\"companyID\"\n                    value={coupon.companyID}\n                    {...register(\"companyID\")} />\n                <br />\n\n                <label>Title</label>\n                <br />\n                <input type=\"text\" name=\"title\"\n                    value={coupon.title}\n                    {...register(\"title\", {\n                        required: true,\n                        minLength: 2\n                    })} />\n                <br />\n\n                <label>Price</label>\n                <br />\n                <input type=\"double\" name=\"price\"\n                    defaultValue={coupon.price}\n                    {...register(\"price\", {\n                        required: true,\n                    })} />\n                <br />\n\n                <label>Amount</label>\n                <br />\n                <input type=\"number\" name=\"amount\"\n                    defaultValue={coupon.amount}\n                    {...register(\"amount\", {\n                        required: true,\n                    })} />\n                <br />\n\n\n                <label>Description</label>\n                <br />\n                <input type=\"text\" name=\"description\"\n                    defaultValue={coupon.description}\n                    {...register(\"description\", {\n                        required: true,\n                        minLength: 2\n                    })} />\n                <br />\n\n                <label>Start Date</label>\n                <br />\n                <input type=\"date\" name=\"startDate\"\n                    // defaultValue={coupon.start_date}\n                    defaultValue={getDate(coupon.startDate)}\n                    {...register(\"startDate\", {\n                        required: true,\n                    })} />\n                <br />\n                <label>End Date</label>\n                <br />\n                <input type=\"date\" name=\"endDate\"\n                    defaultValue={getDate(coupon.endDate)}\n                    {...register(\"endDate\", {\n                        required: true,\n                    })} />\n                <br />\n\n                <button type=\"submit\" color=\"primary\">Update coupon</button>\n            </form>\n        </div>\n    );\n}\n\nexport default UpdateCompanyCoupon;","import { Component } from \"react\";\nimport { Unsubscribe } from \"redux\";\nimport ClientTypeModel from \"../../../Models/ClientTypeModel\";\nimport CouponModel from \"../../../Models/CouponModel\";\nimport LoginModel from \"../../../Models/LoginModel\";\nimport { customerPurchaseDownloadedAction } from \"../../../Redux/CustomerPurchseState\";\nimport store from \"../../../Redux/Store\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/InterceptorAxios\";\nimport notify, { ErrMsg, SccMsg } from \"../../../Services/Notification\";\nimport \"./CustomerPurchases.css\";\n\ninterface CustomerPurchasesState {\n    coupons: CouponModel[];\n    couponsPurchase: CouponModel[];\n    user: LoginModel;\n}\n\nclass CustomerPurchases extends Component<{}, CustomerPurchasesState> {\n    private unsubscribe: Unsubscribe;\n\n    public constructor(props: {}) {\n        super(props);\n        this.state = {\n            coupons: store.getState().CustomerState.customer,\n            couponsPurchase: store.getState().customerPurchaseState.customerPurchase,\n            user: store.getState().authState.user\n        };\n    }\n\n\n    public async componentDidMount(): Promise<void> {\n        console.log(this.state.user?.clientType);\n        console.log(ClientTypeModel.customer);\n        if (this.state.user?.clientType !== ClientTypeModel.customer) {\n            notify.error(ErrMsg.PLS_LOGIN);\n            //redirect to login\n        }\n        this.unsubscribe = store.subscribe(() => {\n            this.setState({\n                coupons: store.getState().CustomerState.customer,\n                couponsPurchase: store.getState().customerPurchaseState.customerPurchase\n            });\n        });\n\n\n        try {\n            const response1 = await tokenAxios.put<CouponModel[]>(globals.urls.customers + \"coupon\"); //async request\n            console.log(response1.status);\n            store.dispatch(customerPurchaseDownloadedAction(response1.data)); //update global state\n            this.setState({ couponsPurchase: response1.data }); //update local state\n            notify.success(SccMsg.PURCHASED_COUPONS);\n\n        } catch (err) {\n            notify.error(ErrMsg.GET_COUPONS_PURCHASE);\n        }\n\n    }\n    public componentWillUnmount(): void {\n        this.unsubscribe();\n    }\n\n    getDate(date: Date): string {\n        const myDate = new Date(date);\n        const year = myDate.getFullYear();\n        const month = (\"0\" + (myDate.getMonth() + 1)).slice(-2);\n        const day = (\"0\" + myDate.getDate()).slice(-2);\n        const newDate = day + \"-\" + month + \"-\" + year;\n        return newDate;\n    }\n\n\n    public render(): JSX.Element {\n        return (\n            <div className=\"CustomerPurchases\">\n                <h1>Purchased Coupons</h1>\n                {this.state.couponsPurchase.length !== 0 && (\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>CATEGORY</th>\n                                <th>TITLE</th>\n                                <th>PRICE</th>\n                                <th>DESCRIPTION</th>\n                                <th>START DATE</th>\n                                <th>END DATE</th>\n                                <th>IMAGE</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.couponsPurchase.map((c) => (\n                                <tr key={c.id}>\n                                    <td>{c.category}</td>\n                                    <td>{c.title}</td>\n                                    <td>{c.price}$</td>\n                                    <td>{c.description}</td>\n                                    <td>{this.getDate(c.startDate)}</td>\n                                    <td>{this.getDate(c.endDate)}</td>\n                                    <td>\n                                        <img src={c.image} alt=\" \" />\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default CustomerPurchases;","import Main from \"../Main/Main\";\nimport \"./Routing.css\";\nimport { Redirect,Route, Switch } from \"react-router-dom\";\nimport Page404 from \"../../ShardArea/Page404/Page404\";\nimport Login from \"../../AuthArea/Login/Login\";\nimport EmptyView from \"../../ShardArea/EmptyView/EmptyView\";\n\nimport Logout from \"../../AuthArea/Logout/Logout\";\n\nimport AdminArea from \"../../AdminArea/AdminArea\";\n\nimport Customer from \"../../CustomersArea/Customer/Customer\";\nimport Company from \"../../CompaniesArea/Company/Company\";\nimport AddCompany from \"../../AdminArea/AddCompany/AddCompany\";\nimport AddCustomer from \"../../AdminArea/AddCustomer/AddCustomer\";\nimport UpdateCompany from \"../../AdminArea/UpdateCompany/UpdateCompany\";\nimport UpdateCustomer from \"../../AdminArea/UpdateCustomer/UpdateCustomer\";\nimport AddCompanyCoupon from \"../../CompaniesArea/AddCompanyCoupon\";\nimport UpdateCompanyCoupon from \"../../CompaniesArea/UpdateCompanyCoupon/UpdateCompanyCoupon\";\nimport CustomerPurchases from \"../../CustomersArea/CustomerPurchases/CustomerPurchases\";\n\nfunction Routing(): JSX.Element {\n    return (\n        <div className=\"Routing\">\n\t\t\t<Switch>\n           <Route path=\"/home\" component={Main} exact/>\n           <Route path=\"/specials\" component={EmptyView} exact/>\n           <Route path=\"/login\" component={Login} exact/>\n           <Route path=\"/logout\" component={Logout} exact/>\n           <Route path=\"/admin\" component={AdminArea} exact/>\n           <Route path=\"/customers\" component={Customer} exact/>\n           <Route path=\"/companies\" component={Company} exact/>       \n           <Route path=\"/admin/company/add\" component={AddCompany} exact />\n           <Route path=\"/admin/customer/add\" component={AddCustomer} exact />\n           <Route path=\"/admin/company/update/:id\" component={UpdateCompany} exact />\n           <Route path=\"/admin/customer/update/:id\" component={UpdateCustomer} exact />  \n           <Route path=\"/companies/coupon/add\" component={AddCompanyCoupon} exact />\n           <Route path=\"/companies/coupon/update/:id\" component={UpdateCompanyCoupon} exact />\n          <Route path=\"/purchaseslist/:id\" component={CustomerPurchases} exact/>\n      \n           <Redirect from='/' to='home' exact/>\n           <Route component={Page404}/>\n            </Switch>\n\n        </div>\n    );\n}\n\nexport default Routing;\n","import \"./RightMenu.css\";\n\nfunction RightMenu(): JSX.Element {\n    return (\n        <div className=\"RightMenu\">\n\t\t\t<span>get your coupons here</span>\n            <br />\n            <img src=\"https://picsum.photos/150\" alt=\"\" />\n        </div>\n    );\n}\n\nexport default RightMenu;\n","import { Box, List, Divider, Button, Drawer } from '@material-ui/core';\nimport * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { $CombinedState } from 'redux';\nimport ClientType from '../../../Models/ClientTypeModel';\n\nimport store from '../../../Redux/Store';\n\nimport \"./Menu.css\";\n\ntype Anchor = 'left';\n\nexport default function Menu() {\n    const [state, setState] = React.useState({\n        left: false,\n    });\n\n    const toggleDrawer =\n        (anchor: Anchor, open: boolean) =>\n            (event: React.KeyboardEvent | React.MouseEvent) => {\n                if (\n                    event.type === 'keydown' &&\n                    ((event as React.KeyboardEvent).key === 'Tab' ||\n                        (event as React.KeyboardEvent).key === 'Shift')\n                ) {\n                    return;\n                }\n\n                setState({ ...state, [anchor]: open });\n            };\n\n    const list = (anchor: Anchor) => (\n        <Box\n            sx={{ width: 170 }}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <List>\n\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                {DefaultMenu()}\n\n            </List>\n            <Divider />\n            {/* <List> */}\n                {/* {AdminMenu()}\n                {CompanyMenu()}\n                {CustomerMenu()} */}\n                {WhatType()}\n            {/* </List> */}\n        </Box>\n    );\n\n    return (\n        <div className=\"mebutton\">\n\n            {(['left'] as const).map((anchor) => (\n                <React.Fragment key={anchor}>\n                    <Button className=\"menubutton\" onClick={toggleDrawer(anchor, true)}>Menu</Button>\n                    <Drawer\n                        anchor={anchor}\n                        open={state[anchor]}\n                        onClose={toggleDrawer(anchor, false)}\n                    >\n                        {list(anchor)}\n                    </Drawer>\n                </React.Fragment>\n            ))}\n        </div>\n    );\n}\n\nfunction AdminMenu() {\n    return (<div>\n\n        <h2>Admin Menu</h2>\n        <NavLink to='/admin' exact>Admin Menu</NavLink>\n        <br />\n    </div>)\n}\nfunction CompanyMenu() {\n    return (<div>\n        <h2>Company Menu</h2>\n        <NavLink to='/companies' exact>Company Menu</NavLink>\n        <br />\n    </div>)\n}\n\nfunction CustomerMenu() {\n    return (<div>\n        <h2>Customer Menu</h2>\n        <NavLink to='/customers' exact>Customer Menu</NavLink>\n        <br />\n    </div>)\n}\n\nfunction DefaultMenu() {\n    return (<div>\n        <h2>Default Menu</h2>\n        <NavLink to='/home' exact>Home</NavLink>\n        <br />\n        <NavLink to='/contactus' exact>Contact_Us</NavLink>\n        <br />\n        <NavLink to='/about' exact>About</NavLink>\n    </div>)\n}\n\n\nfunction WhatType() {\n\n    try {\n        switch (store.getState().authState.user.clientType) {\n            case ClientType.admin:\n                \n                return AdminMenu();     \n            case ClientType.company:\n                return CompanyMenu();\n            case ClientType.customer:\n                return CustomerMenu();\n        }\n    } catch {\n       \n    }\n\n}","import Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\nimport Routing from \"../Routing/Routing\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./Layout.css\";\n\nimport LeftMenu from \"../LeftMenu/LeftMenu\";\nimport RightMenu from \"../RightMenu/RightMenu\";\nimport Menu from \"../Menu/Menu\";\n\nfunction Layout(): JSX.Element {\n    return (\n      <BrowserRouter>\n<section className='myGrid'>\n  <div className='header'>\n        <Header/>\n  </div>\n  <div className='leftSidebar'>\n      <Menu/>\n  </div>\n  <div className='main'>\n      <Routing/>\n  </div>\n  <div className='rightSidebar'>\n    <RightMenu/>\n  </div>\n  <div className='footer'>\n    <Footer/>\n  </div>\n</section>\n</BrowserRouter>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport Layout from './Components/LayoutArea/Layout/Layout';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Layout/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}